<?php

/**
 * @file i18n_extras.module
 * TODO: Enter file description here.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enable WYSIWYG on string translation pages
 * @see http://drupal.org/node/1252144
 */
function i18n_extras_form_i18n_string_translate_page_form_alter(&$form, &$form_state) {
  foreach ($form['strings']['all'] as $name => $field) {
    if (preg_match('/blocks:block:[0-9]+:body/i', $name)) {
      // Change textarea to text_format
      $form['strings']['all'][$name]['#type'] = 'text_format';
      $form['strings']['all'][$name]['#description'] = '<br/>';
    }
  }
  $form['#submit'] = array_merge(array(
    'i18n_extras_string_translate_page_form_submit'
  ), $form['#submit']);
}

/**
 * Implements hook_s_string_translate_page_form_submit().
 *
 * @see i18n_extras_form_i18n_string_translate_page_form_alter().
 */
function i18n_extras_string_translate_page_form_submit($form, &$form_state) {
  //Remove wysiwyg format because i18n cant handle it
  foreach ($form_state['values']['strings'] as $name => $field) {
    if (preg_match('/blocks:block:[0-9]+:body/i',$name)) {
      unset($form_state['values']['strings'][$name]['format']);
    }
  }
}

/**
 * Implements hook_language_switch_links_alter().
 */
function i18n_extras_language_switch_links_alter(array &$links, $type, $path) {
  // Set language switcher links to langcode.
  foreach ($links as $langcode => $link) {
    $links[$langcode]['title'] = $langcode;
  }

  // Add untranslated class to non-translated nodes.
  if (preg_match('/^node\/(\d+)/', $path, $matches) && !empty($matches)) {
    $node = node_load($matches[1]);
    if (!isset($node->tnid)) {
      return;
    }
    // If no translation set exists, set it to the nodes current language.
    if (!($translations = translation_node_get_translations($node->tnid))) {
      $translations[$node->language] = $node->language;
    }
    $translations = array_keys($translations);
    foreach ($links as $langcode => $link) {
      if (!in_array($langcode, $translations)) {
        // Remove the href so that theme_links outputs a span element instead.
        unset($links[$langcode]['href']);
        $links[$langcode]['attributes']['class'][] = 'locale-untranslated';
      }
    }
  }
}

/**
 * Implements hook_field_info_alter().
 *
 * Display terms in correct language on node forms.
 *
 * @see title_taxonomy_info_alter().
 * @see i18n_extras_install() for proper description.
 */
function i18n_extras_field_info_alter(&$info) {
  if (module_exists('title')) {
    $supported_types = array('taxonomy_term_reference' => TRUE);
    foreach ($info as $field_type => &$field_type_info) {
      if (isset($supported_types[$field_type])) {
        if (!isset($field_type_info['settings'])) {
          $field_type_info['settings'] = array();
        }
        $field_type_info['settings']['options_list_callback'] = 'i18n_extras_taxonomy_allowed_values';
      }
    }
  }
}

/**
 * Implements hook_field_storage_details_alter().
 */
function i18n_extras_field_storage_details_alter(&$details, &$field) {
  if (module_exists('title') && $field['type'] == 'taxonomy_term_reference') {
    $field['settings']['options_list_callback'] = 'i18n_extras_taxonomy_allowed_values';
  }
}

/**
 * Implements hook_taxonomy_field_prepare_translation().
 */
function i18n_extras_taxonomy_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &$items, $source_entity, $source_langcode) {
  foreach ($items as $index => $item) {
    $field['settings']['options_list_callback'] = 'i18n_extras_taxonomy_allowed_values';
  }
}

/**
 * Return taxonomy term values for taxonomy reference fields.
 * Instead of using the name property use the entity_label function so that
 * names will be translated.
 */
function i18n_extras_taxonomy_allowed_values($field) {
  $bundle = !empty($field['settings']['allowed_values'][0]['vocabulary']) ? $field['settings']['allowed_values'][0]['vocabulary'] : NULL;
  if ($bundle && ($label = title_field_replacement_get_label_field('taxonomy_term', $bundle))) {
    $options = array();
    foreach ($field['settings']['allowed_values'] as $tree) {
      $vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary']);
      if ($vocabulary && ($terms = taxonomy_get_tree($vocabulary->vid, $tree['parent'], NULL, TRUE))) {
        foreach ($terms as $term) {
          // Use entity_label() instead of $term->name.
          $options[$term->tid] = str_repeat('-', $term->depth) . entity_label('taxonomy_term', $term);
        }
      }
    }
    return $options;
  }
  // i18n_taxonomy_allowed_values() simply localizes, we want the actual.
  if (module_exists('i18n_taxonomy')) {
    $options = array();
    // Node language on edit
    $node_language = i18n_node_i18n_context_language();
    // For node ad, simply use i18n_taxonomy.
    if (!isset($node_language)) {
      $options += i18n_taxonomy_allowed_values($field);
    }
    else {
      foreach ($field['settings']['allowed_values'] as $tree) {
        if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
          switch ($vocabulary->i18n_mode) {
            case I18N_MODE_NONE:
              $options += taxonomy_allowed_values($field);
              break;
            case I18N_MODE_LOCALIZE:
            case I18N_MODE_LANGUAGE:
              $options += i18n_taxonomy_allowed_values($field);
              break;
            case I18N_MODE_TRANSLATE:
            case I18N_MODE_MULTIPLE:
              if ($terms = i18n_taxonomy_get_tree($vocabulary->vid, $node_language->language, $tree['parent'])) {
                foreach ($terms as $term) {
                  $options[$term->tid] = str_repeat('-', $term->depth) . i18n_taxonomy_term_name($term);
                }
              }
              break;
          }
        }
      }
    }
    return $options;
  }

  return taxonomy_allowed_values($field);
}

/**
 * Implements hook_field_attach_presave().
 *
 * While creating NEW content in a different than the UI the taxonomoy terms
 * and the entityreferences will be in the UI language and also saved thusly.
 * Here we hook in to the entity creations and automatically change taxonomy
 * terms and entity references to the translated version in the same language
 * as the parent entity (the NEW content).
 *
 * Limitations:
 * - Only node references are support for entityreference targets.
 */
function i18n_extras_field_attach_presave($entity_type, $entity) {
  list($entity_id, , $bundle) = entity_extract_ids($entity_type, $entity);
  // Only act on new entities
  if (isset($entity->is_new) || isset($entity_id)) {
    return;
  }
  $fields_info = field_info_instances($entity_type, $bundle);
  $parent_langcode = entity_language($entity_type, $entity);
  foreach ($fields_info as $field_name => $value) {
    $field_info = field_info_field($field_name);
    $field_langcode = field_language($entity_type, $entity, $field_name);
    if (!isset($entity->{$field_name}[$field_langcode])) {
      continue;
    }
    switch ($field_info['type']) {
      case 'taxonomy_term_reference':
        $term_ids = array();
        // Map of tid => field_index
        $term_map = array();
        // Gather all term ids referenced.
        foreach ($entity->{$field_name}[$field_langcode] as $idx => $field_item) {
          $tid = $field_item['tid'];
          $term_ids[] = $tid;
          $term_map[$tid] = $idx;
        }
        $terms = taxonomy_term_load_multiple($term_ids);
        foreach ($terms as $term) {
          // If a term reference is in the wrong language.
          if (entity_language('taxonomoy_term', $term) != $parent_langcode) {
            // If a term translation exists
            if ($translated_tid = i18n_taxonomy_translation_term_tid($term->tid, $parent_langcode)) {
              $idx = $term_map[$term->tid];
              // Change the term reference to point to the correct translation.
              $entity->{$field_name}[$field_langcode][$idx]['tid'] = $translated_tid;
            }
          }
        }
        break;
      case 'entityreference':
        $entity_ids = array();
        // Map of target_id => field_index
        $entity_map = array();
        // Gather all entity reference ids.
        foreach ($entity->{$field_name}[$field_langcode] as $idx => $field_item) {
          $entity_id = $field_item['target_id'];
          $entity_ids[] = $entity_id;
          $entity_map[$entity_id] = $idx;
        }
        // The entity type this field references.
        $target_type = $field_info['settings']['target_type'];
        // Currently we only support nodes.
        if ($target_type != 'node') {
          continue;
        }
        $references = entity_load($target_type, $entity_ids);
        foreach ($references as $entity_reference) {
          // The original entity reference id.
          $entity_reference_id = entity_id($target_type, $entity_reference);
          // If the referenced entity is in a different language than the parent.
          if (entity_language($target_type, $entity_reference) != $parent_langcode) {
            $translations = array();
            switch ($target_type) {
              case 'node':
                // Skip referenced entities without a translation set.
                if (empty($entity_reference->tnid)) {
                  continue;
                }
                $translations = translation_node_get_translations($entity_reference->tnid);
                break;
            }
            // If the referenced entity has a translation in the parents language.
            if (isset($translations[$parent_langcode])) {
              $translated_entity_id = entity_id($target_type, $translations[$parent_langcode]);
              $idx = $entity_map[$entity_reference_id];
              // Change the target of the entity reference to the translated version
              $entity->{$field_name}[$field_langcode][$idx]['target_id'] = $translated_entity_id;
            }
          }
        }
        break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * When saving a taxonomy term in a language other than the admin UI language,
 * the relation (parent) value resets as it's not translated.
 */
function i18n_extras_form_taxonomy_form_term_alter(&$form, &$form_state, $edit, $vocabulary) {
  if (!module_exists('i18n_select')) {
    return;
  }
  if (isset($form_state['confirm_delete']) || variable_get('taxonomy_override_selector', FALSE)) {
    return;
  }

  $term = (object) $form['#term'];
  $vocabulary = $form['#vocabulary'];
  $tid = $term->tid;
  if (i18n_taxonomy_vocabulary_mode($vocabulary) == I18N_MODE_LOCALIZE) {
    return;
  }
  $langcode = $term->language;

  // Only continue if the admin language is different from the term language.
  if ($langcode == i18n_select_langcodes()) {
    return;
  }

  // @see taxonomy_get_parents().
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_term_hierarchy', 'h', 'h.parent = t.tid');
  $query->addField('t', 'tid');
  $query->condition('h.tid', $tid);
  // Remove query tag which i18n_select alters.
  // $query->addTag('term_access');
  $query->orderBy('t.weight');
  $query->orderBy('t.name');
  $tids = $query->execute()->fetchCol();
  $parents = taxonomy_term_load_multiple($tids);

  $parent = array_keys($parents);
  $form['#term']['parent'] = $parent;

  $children = i18n_taxonomy_get_tree($vocabulary->vid, $langcode, $term->tid);

  // A term can't be the child of itself, nor of its children.
  foreach ($children as $child) {
    $exclude[] = $child->tid;
  }
  $exclude[] = $term->tid;

  $tree = i18n_taxonomy_get_tree($vocabulary->vid, $langcode);
  $options = array('<' . t('root') . '>');
  if (empty($parent)) {
    $parent = array(0);
  }
  foreach ($tree as $item) {
    if (!in_array($item->tid, $exclude)) {
      $options[$item->tid] = str_repeat('-', $item->depth) . $item->name;
    }
  }
  $form['relations']['parent'] = array(
    '#type' => 'select',
    '#title' => t('Parent terms'),
    '#options' => $options,
    '#default_value' => $parent,
    '#multiple' => TRUE,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function i18n_extras_form_bean_form_alter(&$form) {
  global $language;
  $page_language = $language->language;
  $bean_language = arg(3);
  // If editing a bean in another translation than the admin language,
  // i18n_select resets node/term references.
  // Therefore we redirect the user to the form in the beans admin language.
  if (arg(2) == 'edit' && !empty($bean_language) && $bean_language != $page_language) {
    $language_list = language_list();
    if (!isset($language_list[$bean_language])) {
      return;
    }
    $language = $language_list[$bean_language];
    list(,$path) = language_url_split_prefix($_GET['q'], $language_list);
    drupal_goto($path, array('language' => $language));
  }
}
